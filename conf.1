.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CONF 1"
.TH CONF 1 "2020-02-11" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
conf \- Manage your dotfiles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  conf [options] command [entry_1 [entry_2 ...]]
\&
\&  Help Options:
\&    \-\-help, \-h        Show this script\*(Aqs help information.
\&    \-\-manual, \-man    Read this script\*(Aqs manual.
\&
\&  Arguments:
\&    link              Link an entry.
\&    unlink            Unlink an entry.
\&    check             Check an entry.
\&    list              List entries.
\&    edit              Edit the map file.
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR Show the brief help information." 4
.IX Item "--help Show the brief help information."
.PD 0
.IP "\fB\-\-manual\fR Read the manual, with examples." 4
.IX Item "--manual Read the manual, with examples."
.PD
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a script to manage filesystem-wide symbolic links to your dotfiles (configuration), based on definitions in the map file.
The location of the map file is set in the script itself, using the \f(CW$MAPFILE\fR variable.
The default name of the mapfile is \*(L"dot.map\*(R", and it is located in the root of your dotfiles folder.
The location of your dotfiles is set either using the \f(CW$DOTFILES\fR environment variable, or inside the script itself.
.PP
Every existing file will be backed up by appending the extension '.bak', before being overwritten.
If a directory in the destination path doesn't exist, it is automatically created.
`conf` doesn't remove empty directories after unlinking.
When linking/unlinking you either provide the name of the top directory, or the full name of the mapped path (see examples below for more information).
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
The available commands are:
.IP "\(bu" 4
\&\fBlink [entry1 [entry2...]]\fR
.Sp
Link entries according to the map file.
With no arguments, links all entries.
.IP "\(bu" 4
\&\fBunlink [entry1 [entry2...]]\fR
.Sp
Unlink entries according to the map file.
With no arguments, unlinks all entries.
.IP "\(bu" 4
\&\fBcheck [entry1 [entry2...]]\fR
.Sp
Check that entries are linked accordint to the map file.
With no arguments, checks all entries.
.IP "\(bu" 4
\&\fBedit\fR
.Sp
Edit the map file with whatever you set as \f(CW$EDITOR\fR
.IP "\(bu" 4
\&\fBlist\fR
.Sp
List the current mappings.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Link everything in the mapfile:
.PP
.Vb 1
\&  conf link
.Ve
.PP
Link all files in the \*(L"vim\*(R" directory:
.PP
.Vb 1
\&  conf link vim
.Ve
.PP
Link specifically the shell/bashrc file:
.PP
.Vb 1
\&  conf link shell/bashrc
.Ve
.PP
Link the shell/zprofile file and the vim/autoload directory:
.PP
.Vb 1
\&  conf link shell/zprofile vim/autoload
.Ve
.PP
Check if everything is linked:
.PP
.Vb 1
\&  conf check
.Ve
.PP
Check if everything in the \*(L"vim\*(R" directory is linked:
.PP
.Vb 1
\&  conf check vim
.Ve
.PP
Remove the link to the \*(L"lf\*(R" directory:
.PP
.Vb 1
\&  conf unlink lf
.Ve
.PP
Remove all links defined in the mapfile:
.PP
.Vb 1
\&  conf unlink
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Balgavy (thezeroalpha), <https://github.com/thezeroalpha>.
